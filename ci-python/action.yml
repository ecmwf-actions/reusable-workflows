name: ci-python
description: A composite action build and test python packages.
inputs:
  requirements_path:
    description: Path to pip requirements file.
    default: requirements.txt
  lib_path:
    description: LD_LIBRARY_PATH containing paths to depedency libraries.
    required: false
  bin_paths:
    description: List of paths to bin directories of dependency libraries.
    required: false
  python_version:
    description: The version of python used to test the package
    default: ${{ matrix.python_version }}
  conda_install:
    description: List of packages to install using conda
    required: false
  checkout:
    description: Whether to checkout the repository.
    required: false
  github_token:
    description: Github token with read access to needed repositories.
    required: false
    default: ${{ github.token }}
  repository:
    description: Repository name in format owner/repo@ref.
    required: false
  python_dependencies:
    description: List of python packages to install from source as dependencies. In format owner/repo@ref, multiline for multiple packages.
    required: false
  env:
    description: List of environment variables in format `VAR=value`
    required: false
    default: ${{ matrix.env }}
  test_cmd:
    description: Custom test command.
    required: false
  codecov_upload:
    description: Whether to upload code coverage to codecov service, only for master, develop and PRs.
    required: false
  codecov_token:
    description: codecov.io upload token
    required: false

runs:
  using: composite
  steps:
    - name: Parse repository input
      id: inputs
      if: ${{ inputs.checkout == 'true' }}
      shell: python3 {0}
      run: |
        import os
        repo, ref = "${{ inputs.repository }}".split("@")
        with open(os.getenv("GITHUB_OUTPUT"), "a") as f:
            print("repo", repo, sep="=", file=f)
            print("ref", ref, sep="=", file=f)

    - name: Checkout repository
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@v3
      with:
        repository: ${{ steps.inputs.outputs.repo }}
        ref: ${{ steps.inputs.outputs.ref }}
        token: ${{ inputs.github_token }}

    - name: Set env vars from matrix
      if: ${{ inputs.env }}
      shell: bash -e {0}
      run: echo "${{ inputs.env }}" >> "$GITHUB_ENV"

    - name: Setup python env
      shell: bash -e {0}
      # include openldap to provide a consistent environment with conda's openssl
      run: |
        source /opt/conda/etc/profile.d/conda.sh
        conda create -y -p $RUNNER_TEMP/venv
        conda activate $RUNNER_TEMP/venv
        conda install -y python=${{ inputs.python_version }} openldap
        if [ -n "${{ inputs.conda_install }}" ]; then
          conda install -y ${{ inputs.conda_install }}
        fi
        pip install pytest pytest-cov build
        if [ -f ${{ inputs.requirements_path }} ]; then
          pip install -r ${{ inputs.requirements_path }} 
        fi

    - name: Install dependencies
      if: ${{ inputs.python_dependencies }}
      shell: bash -e {0}
      run: |
        source /opt/conda/etc/profile.d/conda.sh
        conda activate $RUNNER_TEMP/venv

        while IFS= read -r line && [[ -n "$line" ]]; do
          owner="${line%%/*}"
          repo_ref="${line#*/}"
          repo="${repo_ref%%@*}"
          ref="${repo_ref#*@}"
          
          mkdir -p $RUNNER_TEMP/ci-deps/$repo
          cd $RUNNER_TEMP/ci-deps/$repo
          git init
          git remote add origin https://${{ inputs.github_token }}@github.com/$owner/$repo.git
          git fetch --depth 1 origin $ref
          git checkout FETCH_HEAD
          python -m build --sdist
          pip install dist/*
        done <<< "${{ inputs.python_dependencies }}"

    - name: Install package
      shell: bash -e {0}
      run: |
        source /opt/conda/etc/profile.d/conda.sh
        conda activate $RUNNER_TEMP/venv
        python -m build --sdist
        pip install dist/*

    - name: Run tests
      env:
        DYLD_LIBRARY_PATH: ${{ inputs.lib_path }}
        LD_LIBRARY_PATH: ${{ inputs.lib_path }}
      shell: bash -ex {0}
      run: |
        if [ -n "${{ inputs.bin_paths }}" ]; then
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        fi
      run: |
        source /opt/conda/etc/profile.d/conda.sh
        conda activate $RUNNER_TEMP/venv
        if [ -n "${{ inputs.test_cmd }}" ]; then
          echo "Running package-supplied test command"
          ${{ inputs.test_cmd }}
        else
          pytest --cov=./ --cov-report=xml
          python -m coverage report
        fi

    - name: Codecov Upload
      if: ${{ inputs.codecov_upload == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || contains(github.event_name, 'pull_request')) }}
      uses: codecov/codecov-action@v4
      with:
        token: ${{ inputs.codecov_token }}
