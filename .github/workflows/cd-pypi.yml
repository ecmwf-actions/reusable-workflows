---
name: cd-pypi

on:
  workflow_call:
    inputs:
      testpypi:
        description: Whether to upload to testpypi instead of pypi.
          Requires secrets.PYPI_TEST_API_TOKEN to be defined.
        type: boolean
        required: false
        default: false
      working-directory:
        description: Working directory to build Python package (for monorepos).
          Defaults to root directory.
        type: string
        required: false
        default: "./"

jobs:
  deploy:
    #if: ${{ github.ref_type == 'tag' || github.event_name == 'release' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: "0"

#      - name: Test tag name pattern
#        shell: python
#        run: |
#          import re
#          import sys#
#
#          tag_pattern = r"${{ vars.TAG_REGEX_FOR_DEPLOYMENT }}"
#          ref = "${{ github.ref_name }}"
#
#          if not tag_pattern:
#            sys.exit(0)

#          if not re.match(tag_pattern, ref):
#            print(f"::error::{ref} does not match {tag_pattern}")
#            sys.exit(1)

#      - name: Test branch name pattern
#        if: ${{ vars.BRANCH_REGEX_FOR_DEPLOYMENT != '' }}
#        run: |
#          git branch --all --list --format "%(refname:lstrip=-1)" --contains "${{ github.ref_name }}" | grep -E "${{ vars.BRANCH_REGEX_FOR_DEPLOYMENT }}"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine build

#      - name: Check version
#        run: |
#          if [ -f "setup.py" ]; then
#            release=${{ github.ref_name }}
#            version=$(python setup.py --version)
#            test "$release" == "$version"
#          fi

      - name: Build and publish to pypi
        if: ${{ !inputs.testpypi }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m build
          twine upload dist/*

      - name: Build and publish to testpypi
        if: ${{ inputs.testpypi }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TEST_API_TOKEN }}
        run: |
          python -m build
          twine upload --repository testpypi dist/*
