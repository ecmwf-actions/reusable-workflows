name: Create package

on:
  workflow_call:

jobs:
  deploy:
    if: ${{ github.ref_type == 'tag' }}
    strategy:
      matrix:
        name:
          - gnu@debian-11
          - gnu-8@centos-7.9
        include:
          - name: gnu@debian-11
            labels: [self-hosted, platform-builder-debian-11]
            os: debian-11
            compiler: gnu
            compiler_cc: gcc
            compiler_cxx: g++
            compiler_fc: gfortran
            cpack_generator: DEB
            cpack_options: >
              -D CPACK_DEBIAN_PACKAGE_MAINTAINER=software@ecmwf.int 
              -D CPACK_PACKAGING_INSTALL_PREFIX="/opt/ecmwf" 
              -DCPACK_DEBIAN_PACKAGE_SHLIBDEPS=ON
            upload_token: NEXUS_REPO_UPLOAD_TOKEN
            upload_url: NEXUS_REPO_URL_DEBIAN_11
          - name: gnu-8@centos-7.9
            labels: [self-hosted, platform-builder-centos-7.9]
            os: centos-7.9
            compiler: gnu-8
            compiler_cc: gcc-8
            compiler_cxx: g++-8
            compiler_fc: gfortran-8
            cpack_generator: RPM
            cpack_options: >
              -D CPACK_PACKAGING_INSTALL_PREFIX="/opt/ecmwf"
            upload_token: NEXUS_REPO_UPLOAD_TOKEN
            upload_url: NEXUS_REPO_URL_CENTOS_7
    runs-on: ${{ matrix.labels }}
    steps:
      - uses: actions/checkout@v3

      - name: Check version number
        shell: python3 {0}
        run: |
          import os
          import re
          import sys

          tag = "${{ github.ref_name }}"

          def check_version():
              file_name = "VERSION"
              if os.path.isfile(file_name):
                  with open(file_name, 'r') as f:
                      version = f.read().strip()
                      return version
              else:
                  print(f"::warning::{file_name} file not found! Using {file_name} is the preferred method.")
                  return

          def check_cmakelists():
              file_name = "CMakeLists.txt"
              if os.path.isfile(file_name):
                  with open(file_name, 'r') as f:
                      content = f.read()
                      pattern = r"project\([\s\w]+VERSION\s+((?:\d+)(?:.\d+){0,3})"

                      hit = re.search(pattern, content)
                      version = hit.group(1)
                      return version
              else:
                  print(f"::warning::{file_name} file not found!")
                  return

          version = check_version() or check_cmakelists()

          if not version:
              print("::error::Version not found!")
              sys.exit(1)

          if version != tag:
              print(f"::error::Git tag ({tag}) and project version ({version}) do not match!")
              sys.exit(1)

          print("OK: Git tag and project versions match.")

      - name: Create package
        id: build
        uses: ecmwf-actions/reusable-workflows/build-package-with-config@v2
        with:
          repository: ${{ format('{0}@{1}', github.repository, github.sha ) }}
          build_package_inputs: |
            repository: ${{ format('{0}@{1}', github.repository, github.sha ) }}
            cpack_generator: ${{ matrix.cpack_generator }}
            cpack_options: ${{ matrix.cpack_options }}
          build_config: .github/ci-config.yml

      - name: Upload
        run: |
          if [ -z "${{ steps.build.outputs.package_path }}" ] || [ ! -f ${{ steps.build.outputs.package_path }} ]; then
            echo "::error::Built package not found!"
            exit 1
          fi
          response=$(curl -w "%{http_code}" --user '${{ secrets[matrix.upload_token] }}' -H "Content-Type: multipart/form-data" --data-binary "@${{ steps.build.outputs.package_path }}" "${{ secrets[matrix.upload_url] }}")

          status=$(echo $response | tail -c 4)
          if [ $status -eq 201 ]; then
            echo "Successfully uploaded!"
          else
            echo "$status: Upload failed"
            exit 1
          fi
