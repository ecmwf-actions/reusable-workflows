name: ci-python

# Controls when the workflow will run
on:

  # Allow the workflow to be reusable
  workflow_call:
    inputs:

      # Inputs for job steps.
      skip_matrix_jobs:
        description: A list of matrix jobs to skip. Job names should be the full form of `<compiler>@<platform>`.
        required: false
        default: ''
        type: string
      codecov_upload:
        description: Whether to generate and upload code coverage to codecov service for main branches.
        required: false
        default: false
        type: boolean
      notify_teams:
        description: Whether to notify about workflow status via Microsoft Teams. Note that you must supply
          `incoming_webhook` secret if you switch on this feature.
        required: false
        default: false
        type: boolean
      python_version:
        description: The version of Python binary to use.
        required: false
        default: '3.x'
        type: string
      repository:
        description: The source repository name, in case it differs from the current one. Repository names should
          follow the standard Github `owner/name` format.
        required: false
        default: ${{ github.repository }}
        type: string
      ref:
        description: The source repository reference, in case it differs from the current one.
        required: false
        default: ${{ github.ref }}
        type: string

      # Inputs for build-package action.
      build_package_inputs:
        description: Optional inputs for the `build-package` action, provided as a YAML object value.
        required: false
        type: string

    secrets:

      # Secrets for PyPI upload.
      pypi_username:
        description: Username of the PyPI account. The account must have sufficient permissions to deploy the current
          project.
        required: false
      pypi_password:
        description: Password of the PyPI account.
        required: false

      # Secret for notify-teams action.
      incoming_webhook:
        description: Public URL of the Microsoft Teams incoming webhook. To get the value, make sure that channel in
          Teams has the appropriate connector set up. It will only be used if `notify_teams` input is switched on.
        required: false

jobs:
  qa:
    name: qa
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.ref }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python_version }}

    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install black flake8 isort

    - name: Check isort
      run: isort --check .

    - name: Check black
      run: black --check .

    - name: Check flake8
      run: flake8 .

  setup:
    name: setup
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      inputs: ${{ steps.prepare-inputs.outputs.inputs }}
      inputs-for-ubuntu: ${{ steps.prepare-inputs.outputs.inputs-for-ubuntu }}
    steps:
    - name: Set Matrix
      id: set-matrix
      shell: bash -eux {0}
      run: |
        MATRIX=$(cat << 'EOS'
        name:
        - gnu-10@ubuntu-20.04
        - clang-12@ubuntu-20.04
        - gnu-11@ubuntu-22.04
        - clang-14@ubuntu-22.04
        - clang-14@macos-12
        include:
        - name: gnu-10@ubuntu-20.04
          os: ubuntu-20.04
          compiler: gnu-10
          compiler_cc: gcc-10
          compiler_cxx: g++-10
          compiler_fc: gfortran-10
        - name: clang-12@ubuntu-20.04
          os: ubuntu-20.04
          compiler: clang-12
          compiler_cc: clang-12
          compiler_cxx: clang++-12
          compiler_fc: gfortran-10
        - name: gnu-11@ubuntu-22.04
          os: ubuntu-22.04
          compiler: gnu-11
          compiler_cc: gcc-11
          compiler_cxx: g++-11
          compiler_fc: gfortran-11
        - name: clang-14@ubuntu-22.04
          os: ubuntu-22.04
          compiler: clang-14
          compiler_cc: clang-14
          compiler_cxx: clang++-14
          compiler_fc: gfortran-11
        # Xcode compiler requires empty environment variables, so we pass null (~) here
        - name: clang-14@macos-12
          os: macos-12
          compiler: clang-14
          compiler_cc: ~
          compiler_cxx: ~
          compiler_fc: gfortran-11
        EOS
        )
        SKIP_MATRIX_JOBS=$(cat << 'EOS'
        ${{ inputs.skip_matrix_jobs }}
        EOS
        )
        SELECT_NAME_COND="1 != 1"
        SELECT_INCLUDE_COND="1 != 1"
        for skip_job in $SKIP_MATRIX_JOBS; do SELECT_NAME_COND="$SELECT_NAME_COND or . == \"$skip_job\""; SELECT_INCLUDE_COND="$SELECT_INCLUDE_COND or .name == \"$skip_job\""; done
        echo matrix=$(echo "$MATRIX" | yq eval "del(.name[] | select($SELECT_NAME_COND)) | del(.include[] | select($SELECT_INCLUDE_COND))" --output-format json --indent 0 -) >> $GITHUB_OUTPUT

    - name: Prepare build-package Inputs
      id: prepare-inputs
      shell: bash -eux {0}
      run: |
        echo inputs=$(echo "${{ inputs.build_package_inputs || '{}' }}" | yq eval '.' --output-format json --indent 0 -) >> $GITHUB_OUTPUT
        echo inputs-for-ubuntu=$(echo "${{ inputs.build_package_inputs || '{}' }}" | yq eval '. * {"os":"ubuntu-20.04","compiler":"gnu-10","compiler_cc":"gcc-10","compiler_cxx":"g++-10","compiler_fc":"gfortran-10"}' --output-format json --indent 0 -) >> $GITHUB_OUTPUT

  test:
    name: test
    needs:
    - qa
    - setup
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.ref }}

    - name: Install Dependencies
      id: install-dependencies
      uses: ecmwf-actions/build-package@v2
      with: ${{ fromJSON(needs.setup.outputs.inputs) }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python_version }}

    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest pytest-cov
        python -m pip install -r requirements.txt

    - name: Verify Source Distribution
      shell: bash -eux {0}
      run: |
        python setup.py sdist
        python -m pip install dist/*

    - name: Run Tests with Repository Code
      env:
        LD_LIBRARY_PATH: ${{ steps.install-dependencies.outputs.lib_path }}
      shell: bash -eux {0}
      run: |
        DYLD_LIBRARY_PATH=${{ env.LD_LIBRARY_PATH }} python -m pytest --cov=./ --cov-report=xml
        python -m coverage report

    - name: Codecov Upload
      if: inputs.codecov_upload && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')
      uses: codecov/codecov-action@eaaf4bedf32dbdc6b720b63067d99c4d77d6047d

  deploy:
    name: deploy
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    needs:
    - qa
    - setup
    - test
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.ref }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python_version }}

    - name: Setup Python Environment
      run: |
        python -m pip install --upgrade pip
        python -m pip install setuptools wheel twine pytest

    # Checks if the release version matches version declared in the package.
    - name: Check Version
      id: check-version
      shell: bash -eux {0}
      run: |
        release=${GITHUB_REF##*/}
        version=$(python setup.py --version)
        echo is-new-release=$([ "$release" == "$version" ] && echo true) >> $GITHUB_OUTPUT

    - name: Install Dependencies
      id: install-dependencies
      if: steps.check-version.outputs.is-new-release == 'true'
      uses: ecmwf-actions/build-package@v2
      with: ${{ fromJSON(needs.setup.outputs.inputs-for-ubuntu) }}

    - name: Build & Install
      if: steps.check-version.outputs.is-new-release == 'true'
      shell: bash -eux {0}
      run: |
        python setup.py sdist
        python -m pip install dist/*

    - name: Run Tests with Installed Module
      if: steps.check-version.outputs.is-new-release == 'true'
      env:
        LD_LIBRARY_PATH: ${{ steps.install-dependencies.outputs.lib_path }}
      shell: bash -eux {0}
      working-directory: tests
      run: |
        DYLD_LIBRARY_PATH=${{ env.LD_LIBRARY_PATH }} python -m pytest

    - name: Publish on PyPI
      if: steps.check-version.outputs.is-new-release == 'true'
      env:
        TWINE_USERNAME: ${{ secrets.pypi_username }}
        TWINE_PASSWORD: ${{ secrets.pypi_password }}
      shell: bash -eux {0}
      run: twine upload dist/*

  notify:
    name: notify
    runs-on: ubuntu-20.04
    needs:
    - qa
    - setup
    - test
    - deploy
    if: always() && inputs.notify_teams && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')
    steps:
    - name: Notify Teams
      uses: ecmwf-actions/notify-teams@v1
      with:
        incoming_webhook: ${{ secrets.incoming_webhook }}
        needs_context: ${{ toJSON(needs) }}
