name: build-package-with-config
description: |
  A wrapper around build-package action to support reading build configuration from a file.
inputs:
  repository:
    description: Repository name in format owner/repo@ref.
    required: true
  build_package_inputs:
    description: build-package action inputs in yaml format.
    required: false
  build_config:
    description:
      Path to build configuration yaml. Relative path from the repository root,
      e.g. `.github/build-config.yml`.
    required: false
  build_config_key:
    description: Config name in the build config file.
    required: false
    default: ${{ matrix.config }}
  build_dependencies:
    description: List of dependencies in format `owner/repo@sha`. If the same `owner/repo` is defined in build config file, this input has precedence.
    required: false
  github_token:
    description: Github token with read access to needed repositories.
    required: false
    default: ${{ github.token }}
  codecov_upload:
    description: Whether to upload code coverage to codecov service, only for master, develop and PRs.
    required: false
  env:
    description: List of environment variables in format `VAR=value`
    required: false
    default: ${{ matrix.env }}
  codecov_token:
    description: codecov.io upload token
    required: false
  python_version:
    description: Version of python to optionally setup. If not supplied, only system python is available.
    required: false

runs:
  using: composite
  steps:
    - name: Parse repository input
      id: inputs
      shell: python3 {0}
      run: |
        import os
        repo, ref = "${{ inputs.repository }}".split("@")
        with open(os.getenv("GITHUB_OUTPUT"), "a") as f:
            print("repo", repo, sep="=", file=f)
            print("ref", ref, sep="=", file=f)

    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        repository: ${{ steps.inputs.outputs.repo }}
        ref: ${{ steps.inputs.outputs.ref }}
        token: ${{ inputs.github_token }}

    - name: Set env vars from matrix
      if: ${{ inputs.env }}
      shell: bash -e {0}
      run: echo "${{ inputs.env }}" >> "$GITHUB_ENV"

    - name: Merge inputs with config file
      id: config
      shell: python3 {0}
      run: |
        import os
        import json
        import yaml

        inputs_yaml = """${{ inputs.build_package_inputs }}"""
        inputs = yaml.safe_load(inputs_yaml) or {}
        token = "${{ inputs.github_token }}"
        if token:
          inputs["github_token"] = token
        print("Inputs:\n", yaml.dump(inputs, sort_keys=False), sep='')

        config_path = "${{ inputs.build_config }}"
        if not config_path:
          config = {}
        else:
          with open(config_path, "r") as f:
            config = yaml.safe_load(f)
          if "${{ inputs.build_config_key }}":
            config = config["${{ inputs.build_config_key }}"] 
          print("Config file:\n", yaml.dump(config, sort_keys=False), sep='')

        build_deps_input = """${{ inputs.build_dependencies }}"""
        if build_deps_input:
          deps_config = {}
          for line in config.get("dependencies", "").splitlines():
            repo, *refs = line.split('@')
            ref = "" if len(refs) == 0 else refs[0]
            deps_config[repo] = ref
          for line in build_deps_input.splitlines():
            repo, *refs = line.split('@')
            ref = "" if len(refs) == 0 else refs[0]
            deps_config[repo] = ref
          config["dependencies"] = "\n".join([f"{k}@{v}" if v else k for k, v in deps_config.items()])

        combined = {**config, **inputs}

        combined["self_coverage"] = "${{ inputs.codecov_upload == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || contains(github.event_name, 'pull_request')) }}"

        print("Combined inputs:\n", yaml.dump(combined, sort_keys=False), sep='')

        with open(os.getenv("GITHUB_OUTPUT"), "a") as f:
          print(f"config<<EOF", file=f)
          print(json.dumps(combined, separators=(',', ':')), file=f)
          print("EOF", file=f)

    - name: Check upstream build status
      uses: ecmwf-actions/reusable-workflows/check-upstream-conclusion@v2
      with:
        deps: ${{ fromJSON(steps.config.outputs.config).dependencies }}
        token: ${{ inputs.github_token }}

    - name: Setup python
      shell: bash -e {0}
      if: ${{ inputs.python_version }}
      run: |
        source /opt/conda/etc/profile.d/conda.sh
        conda create -y -p $RUNNER_TEMP/bpvenv python=${{ inputs.python_version }}
        echo "Python3_EXECUTABLE=$RUNNER_TEMP/bpvenv/bin/python" >> "$GITHUB_ENV"

    - name: Build package
      id: build
      uses: ecmwf-actions/build-package@v2
      with: ${{ fromJSON(steps.config.outputs.config) }}

    - name: Codecov Upload
      if: ${{ inputs.codecov_upload == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || contains(github.event_name, 'pull_request')) && steps.build.outputs.coverage_file }}
      uses: codecov/codecov-action@v4
      with:
        files: ${{ steps.build.outputs.coverage_file }}
        token: ${{ inputs.codecov_token }}

outputs:
  lib_path:
    description: Library paths of all installed packages, delimited by colons (:).
    value: ${{ steps.build.outputs.lib_path }}
  bin_paths:
    description: Bin paths of all installed packages, delimited by colons (:).
    value: ${{ steps.build.outputs.bin_paths }}
  package_path:
    description: Absolute path to generated package.
    value: ${{ steps.build.outputs.package_path }}
